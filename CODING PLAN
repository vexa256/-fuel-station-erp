#  REALISTIC 10-MODULE STRUCTURE (DATABASE-DRIVEN)
# MODULE 1: AUTHENTICATION & USER MANAGEMENT ⭐ CRITICAL
# AuthController
# ├── login() - Basic email/password authentication
# ├── logout() - Session cleanup with audit logging
# ├── lockAccount() - Account lockout after failed attempts
# └── resetPassword() - Password reset workflow

# UserController
# ├── index() - User listing with role filtering
# ├── create() - User creation with role assignment
# ├── edit($id) - User profile editing
# ├── assignStations($id) - Station assignment for managers
# ├── permissions($id) - Role-based permission management
# └── activity($id) - User activity audit trail

# Routes:
# ├── /login (GET/POST)
# ├── /logout (POST)
# ├── /users (GET)
# ├── /users/create (GET/POST)
# ├── /users/{id}/edit (GET/POST)
# ├── /users/{id}/stations (GET/POST)
# └── /users/{id}/activity (GET)

# Views:
# ├── auth/login.blade.php - Clean login form with validation
# ├── users/index.blade.php - User management table with search/filter
# ├── users/create.blade.php - User creation form with role selection
# ├── users/edit.blade.php - User profile editing form
# ├── users/stations.blade.php - Station assignment interface
# └── users/activity.blade.php - Activity log with timeline view

# Tables Used: users, user_stations, sessions, audit_logs
# MODULE 2: STATION & INFRASTRUCTURE SETUP ⭐ HIGH PRIORITY
# StationController
# ├── index() - Station listing with status overview
# ├── create() - New station setup wizard
# ├── edit($id) - Station configuration management
# ├── dashboard($id) - Single station operational view
# └── status($id) - Real-time station status

# TankController (WITH MORE VIEWS IF NEED BE ONLY)
# ├── index($stationId) - Tank management for station
# ├── create($stationId) - New tank setup with calibration
# ├── edit($id) - Tank configuration editing
# ├── calibration($id) - Tank calibration table management
# └── layers($id) - FIFO inventory layers view

# PumpController
# ├── index($stationId) - Pump management for station
# ├── create($stationId) - New pump setup
# ├── edit($id) - Pump configuration
# └── maintenance($id) - Pump maintenance tracking

# # Routes:
# # ├── /stations (GET)
# # ├── /stations/create (GET/POST)
# # ├── /stations/{id} (GET/POST)
# # ├── /stations/{id}/dashboard (GET)
# # ├── /stations/{station}/tanks (GET)
# # ├── /stations/{station}/tanks/create (GET/POST)
# # ├── /tanks/{id}/edit (GET/POST)
# # ├── /tanks/{id}/calibration (GET/POST)
# # ├── /stations/{station}/pumps (GET)
# # └── /pumps/{id}/edit (GET/POST)

# Views:
# ├── stations/index.blade.php - Station overview with status cards
# ├── stations/create.blade.php - Station setup wizard
# ├── stations/edit.blade.php - Station configuration form
# ├── stations/dashboard.blade.php - Single station dashboard
# ├── tanks/index.blade.php - Tank management interface
# ├── tanks/create.blade.php - Tank setup form with capacity validation
# ├── tanks/edit.blade.php - Tank configuration editing
# ├── tanks/calibration.blade.php - Calibration table management
# ├── pumps/index.blade.php - Pump management interface
# └── pumps/edit.blade.php - Pump configuration form

;
;
; DAILY READING CODING PLAN
; DAILY READING CODING PLAN
; DAILY READING CODING PLAN

; ### ENHANCED FUEL_ERP CODING PLAN - TIME-BASED DAILY READINGS

; **Tables Used:** `dip_readings`, `meter_readings`, `daily_reconciliations`, `tanks`, `pumps`, `products`, `tank_calibration_tables`, `tank_inventory_layers`, `deliveries`, `variances`, `fuel_constants`, `audit_logs`

; ## **MODULE 3A: MORNING READING SPECIALIST 🌅**

; **MorningReadingController** - *Overnight Validation & Opening Balance*
; ├── `index()` - Morning dashboard (6:00 AM - 9:00 AM window only)
; ├── `create()` - Morning dip entry with overnight variance detection├── `store()` - Morning validation with continuity checks & theft detection
; ├── `edit($id)` - Morning correction (CEO approval + audit trail)
; ├── `validateTimeWindow()` - Enforce 6:00-9:00 AM restriction
; ├── `detectOvernightTheft()` - Flag impossible overnight changes
; └── `applyTemperatureCorrection()` - International fuel constants integration

; ## **MODULE 3B: EVENING READING SPECIALIST 🌆**

; ; **EveningReadingController** - *Full-Day Reconciliation & Closing Balance*
; ; ├── `index()` - Evening dashboard (6:00 PM - 9:00 PM window only)
; ; ├── `create()` - Evening dip entry with full-day calculation preview
; ; ├── `store()` - Evening validation with dual-method reconciliation
; ; ├── `reconcile()` - Complete daily reconciliation process
; ; ├── `validateTimeWindow()` - Enforce 6:00-9:00 PM restriction
; ; ├── `calculateDualMethod()` - Physical dip vs meter sales validation
; ; └── `updateFIFOLayers()` - Inventory layer consumption tracking

; ; ## **MODULE 3C: CONTINUOUS METER SPECIALIST ⏰**

; ; **ContinuousMeterController** - *24/7 Real-Time Sales Tracking*
; ; ├── `index()` - Real-time meter dashboard (no time restrictions)
; ; ├── `create()` - Quick meter entry form with pump selection
; ; ├── `store()` - Meter validation with progressive reconciliation
; ; ├── `bulkEntry()` - Multiple pump entry interface
; ; ├── `validateMeterProgression()` - Ensure logical meter advancement
; ; ├── `calculateRealTimeSales()` - Immediate sales calculation
; ; └── `updateCumulativeTotals()` - Running totals for reconciliation

; ; ## **MODULE 3D: INTELLIGENT RECONCILIATION ENGINE 🧠**

; ; **ReconciliationController** - *Partial Data Handling & Variance Analysis*
; ; ├── `daily($stationId, $date)` - Daily reconciliation dashboard
; ; ├── `calculate()` - Intelligent calculation with available data
; ; ├── `calculatePartialReconciliation()` - Handle incomplete readings scenarios
; ; ├── `approve($id)` - Reconciliation approval workflow
; ; ├── `variance($id)` - Variance analysis & investigation triggers
; ; ├── `detectPatterns()` - Systematic discrepancy identification
; ; ├── `generateIntelligentEstimation()` - Historical pattern-based estimation
; ; └── `validateVarianceThresholds()` - Dynamic threshold management

; ## **ENHANCED DATABASE OPTIMIZATIONS 📊**

; **Performance Indexes:**

; ```sql
; CREATE INDEX idx_dip_readings_tank_date_shift ON dip_readings(tank_id, reading_date, reading_shift);
; CREATE INDEX idx_meter_readings_timestamp ON meter_readings(reading_timestamp);
; CREATE INDEX idx_meter_readings_pump_timestamp ON meter_readings(pump_id, reading_timestamp);
; CREATE INDEX idx_daily_reconciliations_station_date ON daily_reconciliations(station_id, reconciliation_date);
; CREATE INDEX idx_deliveries_tank_timestamp ON deliveries(tank_id, delivery_timestamp);
; ```

; **Enhanced Tables:**

; ```sql
; -- Fuel Constants Table (International Standards)
; CREATE TABLE fuel_constants (
;     id INT PRIMARY KEY AUTO_INCREMENT,
;     product_id INT,
;     density_15c DECIMAL(6,4) DEFAULT 0.7550,
;     thermal_expansion_coefficient DECIMAL(8,6) DEFAULT 0.001200,
;     vapor_pressure_correction DECIMAL(4,3) DEFAULT 0.980,
;     temperature_reference_celsius INT DEFAULT 15,
;     api_gravity DECIMAL(4,1),
;     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
; );

; -- Enhanced Variance Tracking
; ALTER TABLE variances ADD COLUMN variance_threshold_percentage DECIMAL(5,3);
; ALTER TABLE variances ADD COLUMN tank_capacity_liters INT;
; ALTER TABLE variances ADD COLUMN dynamic_threshold_applied BOOLEAN DEFAULT FALSE;
; ```

; ## **TIME-BASED ROUTING STRUCTURE 🕐**

; **Morning Routes (6:00 AM - 9:00 AM):**
; ├── `/morning/readings` (GET) - Morning dashboard
; ├── `/morning/readings/create` (GET/POST) - Morning entry form
; ├── `/morning/readings/{id}/edit` (GET/PUT) - Morning correction
; └── `/morning/validate-time` (POST) - Time window validation

; **Evening Routes (6:00 PM - 9:00 PM):**
; ├── `/evening/readings` (GET) - Evening dashboard├── `/evening/readings/create` (GET/POST) - Evening entry form
; ├── `/evening/reconcile` (POST) - Full-day reconciliation
; └── `/evening/validate-time` (POST) - Time window validation

; **Continuous Meter Routes (24/7):**
; ├── `/meters/readings` (GET) - Real-time meter dashboard
; ├── `/meters/readings/create` (GET/POST) - Quick meter entry
; ├── `/meters/bulk-entry` (GET/POST) - Multiple pump interface
; └── `/meters/real-time-update` (POST) - Live sales tracking

; **Reconciliation Routes:**
; ├── `/reconciliation/daily/{station}/{date}` (GET) - Daily reconciliation
; ├── `/reconciliation/calculate` (POST) - Intelligent calculation
; ├── `/reconciliation/partial/{tank}/{time}` (POST) - Partial data handling
; ├── `/reconciliation/{id}/approve` (POST) - Approval workflow
; ├── `/reconciliation/variance/{id}` (GET) - Variance investigation
; └── `/reconciliation/patterns/{station}` (GET) - Pattern analysis

; ## **SPECIALIZED SELF-CONTAINED VIEWS 🎨**

; **Morning Reading Views:**
; ├── `morning/readings/index.blade.php` - 6-9 AM dashboard with overnight alerts
; ├── `morning/readings/create.blade.php` - Morning entry with theft detection
; ├── `morning/readings/edit.blade.php` - Morning correction with CEO approval
; └── `morning/readings/validate.blade.php` - Real-time morning validation

; **Evening Reading Views:**
; ├── `evening/readings/index.blade.php` - 6-9 PM dashboard with daily summary
; ├── `evening/readings/create.blade.php` - Evening entry with reconciliation preview
; ├── `evening/readings/reconcile.blade.php` - Full-day reconciliation interface
; └── `evening/readings/variance.blade.php` - Variance investigation triggers

; **Continuous Meter Views:**
; ├── `meters/readings/index.blade.php` - 24/7 real-time dashboard
; ├── `meters/readings/create.blade.php` - Quick meter entry form
; ├── `meters/readings/bulk-entry.blade.php` - Multiple pump interface
; └── `meters/readings/progressive.blade.php` - Progressive reconciliation display

; **Reconciliation Views:**
; ├── `reconciliation/daily.blade.php` - Daily reconciliation control center
; ├── `reconciliation/partial-data.blade.php` - Incomplete data handling
; ├── `reconciliation/variance-analysis.blade.php` - Advanced variance investigation
; ├── `reconciliation/pattern-recognition.blade.php` - Systematic discrepancy detection
; └── `reconciliation/approval-workflow.blade.php` - Multi-level approval interface

; ## **Controller  VALIDATION LAYER 🛡️**

; **Time Window Middleware:**
; ├── `TimeWindowMiddleware::morning` - 6:00-9:00 AM validation (Allow CEO/SYSTEM_ADMIN Overide) with audit loging
; ├── `TimeWindowMiddleware::evening` - 6:00-9:00 PM validation (Allow CEO/SYSTEM_ADMIN Overide) with audit loging
; ├── `TimeWindowMiddleware::continuous` - 24/7 availability (Allow CEO/SYSTEM_ADMIN Overide) with audit loging
; └── `TimeWindowMiddleware::emergency` - CEO override capabilities (Allow CEO/SYSTEM_ADMIN Overide) with audit loging

; **Validation Rules:**
; ├── `MorningReadingRequest` - Morning-specific validation
; ├── `EveningReadingRequest` - Evening-specific validation├── `ContinuousMeterRequest` - Meter reading validation
; └── `ReconciliationRequest` - Reconciliation data validation

; ## **INTERNATIONAL FUEL CONSTANTS INTEGRATION 🌍**

; **Fuel Constants Configuration:**
; INSERT INTO fuel_constants (product_id, density_15c, thermal_expansion_coefficient, vapor_pressure_correction, api_gravity) VALUES
; -- PETROL_95 (PMS - Premium Motor Spirit)
; (1, 0.7500, 0.001200, 0.980, 60.0),

; -- PETROL_98 (Super Plus)
; (2, 0.7560, 0.001200, 0.980, 59.5),

; -- DIESEL (Automotive Gas Oil)
; (3, 0.8320, 0.000900, 0.995, 35.2),

; -- KEROSENE (Illuminating Kerosene)
; (4, 0.8000, 0.001000, 0.992, 44.5),

; -- JET A-1 (Aviation Kerosene)
; (6, 0.7800, 0.000990, 0.985, 50.0),

; -- HEAVY FUEL OIL (HFO)
; (7, 0.9750, 0.000630, 0.998, 16.5),

; -- LIGHT FUEL OIL (LFO)
; (8, 0.8550, 0.000720, 0.996, 33.0),

; -- LPG AUTOGAS (Propane-Butane blend)
; (9, 0.5600, 0.001800, 0.950, 109.0),

; -- ETHANOL E10
; (10, 0.7480, 0.001100, 0.975, 60.5),

; -- ETHANOL E85
; (11, 0.7800, 0.001050, 0.965, 49.0),

; -- BIODIESEL B7
; (12, 0.8350, 0.000780, 0.994, 34.9),

; -- BIODIESEL B20
; (13, 0.8420, 0.000820, 0.993, 33.6);


; ## **IMPLEMENTATION PHASES 📅**

; **Phase 1 (Days 1-3): Foundation**
; ├── Time Window Middleware implementation
; ├── Fuel Constants configuration
; ├── Database optimization indexes
; └── Enhanced table modifications

; **Phase 2 (Days 4-6): Morning Reading Specialist**
; ├── MorningReadingController implementation
; ├── Morning-specific views creation
; ├── Overnight theft detection logic
; └── Temperature correction integration

; **Phase 3 (Days 7-9): Evening Reading Specialist**
; ├── EveningReadingController implementation
; ├── Evening-specific views creation
; ├── Dual-method reconciliation logic
; └── FIFO layer integration

; **Phase 4 (Days 10-12): Continuous Meter Specialist**
; ├── ContinuousMeterController implementation
; ├── 24/7 meter reading views
; ├── Real-time sales tracking
; └── Progressive reconciliation

; **Phase 5 (Days 13-15): Intelligent Reconciliation**
; ├── ReconciliationController implementation
; ├── Partial data handling logic
; ├── Pattern recognition algorithms
; └── Advanced variance analysis

## **SUCCESS METRICS & VALIDATION 📊**

**Technical Performance:**
├── Reading Completion Rate: >95% within time windows
├── Variance Detection Accuracy: <2% false positives
├── Reconciliation Calculation Precision: >99.5%
├── System Response Time: <3 seconds all operations
└── Database Query Optimization: <100ms average

**Business Impact:**
├── Theft Detection: Early overnight discrepancy identification
├── Operational Compliance: 100% regulatory requirement adherence
├── Cost Accuracy: Precise FIFO costing with temperature correction
├── Audit Readiness: Complete forensic trail maintenance
└── Pattern Recognition: Systematic discrepancy prevention
; DAILY READING CODING PLAN
; DAILY READING CODING PLAN
; DAILY READING CODING PLAN

; Tables Used: readings, dip_readings, meter_readings, daily_reconciliations
; MODULE 4: DELIVERY & INVENTORY MANAGEMENT 🔥 CRITICAL CORE
; DeliveryController
; ├── index() - Delivery management dashboard
; ├── create() - Delivery recording form
; ├── store() - Delivery processing with FIFO layer creation
; ├── receive($id) - Delivery receiving workflow
; └── receipts($id) - Delivery receipt management



InventoryController
├── layers($tankId) - FIFO layer visualization & management
├── consumeFromLayers() - FIFO consumption logic (called by ReadingController)
├── createLayer() - Layer creation logic (called by DeliveryController)
├── movements($tankId) - All inventory movements for a tank
├── valuation($stationId) - Current inventory valuation
├── adjustments() - Manual inventory adjustments with approval
└── batchConsumption($tankId) - Detailed consumption tracking

Routes:
├── /deliveries (GET)
├── /deliveries/create (GET/POST)
├── /deliveries/{id}/receive (GET/POST)
├── /deliveries/{id}/receipt (GET)
├── /inventory/layers/{tank} (GET)
├── /inventory/movements/{tank} (GET)
├── /inventory/valuation/{station} (GET)
└── /inventory/consumption/{tank} (GET)

Views:
├── deliveries/index.blade.php - Delivery management with status tracking
├── deliveries/create.blade.php - Delivery entry form with validation
├── deliveries/receive.blade.php - Delivery receiving workflow
├── deliveries/receipt.blade.php - Delivery receipt view
├── inventory/layers.blade.php - FIFO layer visualization with charts
├── inventory/movements.blade.php - Movement history table
├── inventory/valuation.blade.php - Inventory valuation dashboard
└── inventory/consumption.blade.php - Consumption analytics

Tables Used: deliveries, delivery_receipts, tank_inventory_layers, inventory_movements, batch_consumption
MODULE 5: VARIANCE DETECTION & APPROVAL WORKFLOW 🔥 CRITICAL CORE
VarianceController
├── index() - Variance management dashboard
├── analyze($id) - Detailed variance analysis
├── investigate($id) - Investigation workflow initiation
├── explain($id) - Manager variance explanation
└── patterns($stationId) - Variance pattern analysis

ApprovalController
├── queue() - CEO approval queue with SLA timers
├── approve($id) - Variance approval with notes
├── reject($id) - Variance rejection with reasons
├── delegate($id) - Approval delegation
└── history() - Approval history tracking

Routes:
├── /variances (GET)
├── /variances/{id}/analyze (GET)
├── /variances/{id}/investigate (GET/POST)
├── /variances/{id}/explain (GET/POST)
├── /approvals/queue (GET)
├── /approvals/{id}/approve (POST)
├── /approvals/{id}/reject (POST)
└── /approvals/history (GET)

Views:
├── variances/index.blade.php - Variance dashboard with alerts
├── variances/analyze.blade.php - Detailed variance analysis
├── variances/investigate.blade.php - Investigation workflow
├── variances/explain.blade.php - Manager explanation form
├── approvals/queue.blade.php - CEO approval interface with SLA timers
├── approvals/approve.blade.php - Approval form with decision logging
├── approvals/reject.blade.php - Rejection form with reason codes
└── approvals/history.blade.php - Approval history with search

Tables Used: variances, variance_investigations, approvals
MODULE 6: PRICE MANAGEMENT ⭐ MEDIUM PRIORITY
PriceController
├── index() - Price management dashboard
├── change() - Price change workflow
├── history($productType) - Price change history
├── margins() - Margin analysis

Routes:
├── /prices (GET)
├── /prices/change (GET/POST)
├── /prices/history/{product} (GET)
├── /prices/margins (GET)

Views:
├── prices/index.blade.php - Price management dashboard
├── prices/change.blade.php - Price change form with validation
├── prices/history.blade.php - Price history timeline
├── prices/margins.blade.php - Margin analysis charts
└── prices/compare.blade.php - Market comparison table

MODULE 7: SUPPLIER & PROCUREMENT MANAGEMENT 🔥 CRITICAL CORE ONLY
SupplierController ⚡ ESSENTIAL
├── index() - Supplier list with active/inactive filter
├── create() - New supplier registration form
├── store() - Supplier creation with validation
└── show($id) - Supplier profile view
ContractController ⚡ ESSENTIAL
├── index() - Active contracts list
├── create() - Contract creation with pricing
├── store() - Contract setup with volume discounts
└── show($id) - Contract details for PO creation
PurchaseOrderController ⚡ ESSENTIAL
├── index() - PO management dashboard
├── create() - PO creation linked to contracts
├── store() - PO generation with pricing calculation
├── approve($id) - PO approval workflow
└── receive($id) - Link completed deliveries to POs

Tables Used: suppliers, supplier_contracts, purchase_orders, supplier_invoices, supplier_payments
MODULE 8: SHOP INVENTORY ⭐ LOW PRIORITY
ShopController
├── inventory() - Shop inventory management
├── count() - Daily inventory counting
├── variance() - Shop variance analysis
└── performance() - Shop performance metrics

Routes:
├── /shop/inventory (GET)
├── /shop/count (GET/POST)
├── /shop/variance (GET)
└── /shop/performance (GET)

Views:
├── shop/inventory.blade.php - Shop inventory dashboard
├── shop/count.blade.php - Daily counting interface
├── shop/variance.blade.php - Variance analysis
└── shop/performance.blade.php - Performance metrics

Tables Used: shop_inventories
MODULE 9: REPORTING & DASHBOARD ⭐ MEDIUM PRIORITY
DashboardController
├── index() - Executive dashboard
├── station($id) - Single station dashboard
├── operational() - Operational overview
└── financial() - Financial summary

ReportController
├── daily() - Daily operation reports
├── variance() - Variance analysis reports
├── inventory() - Inventory status reports
├── financial() - Financial performance reports
└── compliance() - Regulatory compliance reports

Routes:
├── /dashboard (GET)
├── /dashboard/station/{id} (GET)
├── /dashboard/operational (GET)
├── /reports/daily (GET)
├── /reports/variance (GET)
├── /reports/inventory (GET)
└── /reports/financial (GET)

Views:
├── dashboard/index.blade.php - Executive dashboard with KPIs
├── dashboard/station.blade.php - Station-specific dashboard
├── dashboard/operational.blade.php - Operational metrics
├── reports/daily.blade.php - Daily operations report
├── reports/variance.blade.php - Variance analysis report
├── reports/inventory.blade.php - Inventory status report
└── reports/financial.blade.php - Financial performance report

Tables Used: All tables for comprehensive reporting
MODULE 10: SYSTEM ADMINISTRATION ⭐ MEDIUM PRIORITY
AdminController
├── dashboard() - System admin dashboard
├── users() - Advanced user management
├── audit() - System audit trail
├── backup() - Backup management
└── maintenance() - System maintenance

ConfigController
├── business() - Business rule configuration
├── thresholds() - Variance threshold settings
├── notifications() - Notification management
├── time-windows() - Reading time window settings
└── integrations() - System integration settings

Routes:
├── /admin/dashboard (GET)
├── /admin/users (GET)
├── /admin/audit (GET)
├── /config/business (GET/POST)
├── /config/thresholds (GET/POST)
├── /config/notifications (GET/POST)
└── /config/time-windows (GET/POST)

Views:
├── admin/dashboard.blade.php - System administration dashboard
├── admin/users.blade.php - Advanced user management
├── admin/audit.blade.php - Comprehensive audit trail
├── config/business.blade.php - Business rule configuration
├── config/thresholds.blade.php - Threshold management
├── config/notifications.blade.php - Notification settings
└── config/time-windows.blade.php - Time window configuration

Tables Used: system_configurations, notifications, audit_logs, hash_chains, data_corrections




